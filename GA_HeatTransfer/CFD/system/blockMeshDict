/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include        "include/Dimensions" 

//#codeStream;

convertToMeters 1;

vertices
(
    ($Xmin	$Y1	$Z1)
    ($Xmax1	$Y1	$Z1)
    ($Xmax1	$Y	$Z1)
    ($Xmin	$Y	$Z1)
    
    ($Xmin	$Y1	$Z)
    ($Xmax1	$Y1	$Z)
    ($Xmax1	$Y	$Z)
    ($Xmin	$Y	$Z)

    ($Xmax1	$Y1	$Z1)
    ($Xmax2	$Y1	$Z1)
    ($Xmax2	$Y	$Z1)
    ($Xmax1	$Y	$Z1)
    
    ($Xmax1	$Y1	$Z)
    ($Xmax2	$Y1	$Z)
    ($Xmax2	$Y	$Z)
    ($Xmax1	$Y	$Z)





);

blocks
(
  
    hex (0 1 2 3 4 5 6 7)   	  (40 8 1) edgeGrading (1 1 1 1 1 1 1 1 1 1 1 1)
    hex (8 9 10 11 12 13 14 15)   (40 8 1) edgeGrading (1 1 1 1 1 1 1 1 1 1 1 1)
   

);

edges
(
);

boundary
(

    inlet 
    {
        type patch;
        faces
        (
            (0 3 7 4)
        );
    }

    outlet 
    {
        type patch;
        faces
        (
            (9 13 14 10)
        );
    }

    top
    {
        type symmetryPlane;
        faces
        (
	   (7 3 2 6)
	   (15 11 10 14)
	);
    }
    bottom
    {
        type symmetryPlane;
        faces
        (
	   (4 5 1 0)
	   (12 13 9 8)
	);
    }
    back
    {
        type empty;
        faces
        (
            (0 1 2 3)
	    (8 9 10 11)
        );
    }
    front
    {
        type empty;
        faces
        (
            (7 6 5 4)
            (15 14 13 12)
        );
    }
    j1
    {
	type patch;
	faces
	(
	    (1 5 6 2)
	);
    }
    j2
    {
	type patch;
	faces
	(
	    (8 11 15 12)
	);
    }

);

mergePatchPairs
(
(j1 j2)
);

// ************************************************************************* //
